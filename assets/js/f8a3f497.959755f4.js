"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5939],{7783:(a,s,i)=>{i.r(s),i.d(s,{assets:()=>d,contentTitle:()=>t,default:()=>o,frontMatter:()=>c,metadata:()=>m,toc:()=>u});var r=i(4848),n=i(8453),e=i(1470),l=i(9365);const c={sidebar_label:"Class Diagram"},t=void 0,m={id:"Graphs/ClassDiagram",title:"ClassDiagram",description:"The following classes can be useful when creating class diagrams:",source:"@site/docs/Graphs/ClassDiagram.mdx",sourceDirName:"Graphs",slug:"/Graphs/ClassDiagram",permalink:"/Siren/docs/Graphs/ClassDiagram",draft:!1,unlisted:!1,editUrl:"https://github.com/Freymaurer/Siren/tree/main/docs/docs/Graphs/ClassDiagram.mdx",tags:[],version:"current",frontMatter:{sidebar_label:"Class Diagram"},sidebar:"docsSidebar",previous:{title:"Block Diagram",permalink:"/Siren/docs/Graphs/Block"},next:{title:"Entity Relationship Diagram",permalink:"/Siren/docs/Graphs/ErDiagram"}},d={},u=[{value:"Animals",id:"animals",level:2},{value:"Class",id:"class",level:2},{value:"Generic Types",id:"generic-types",level:2},{value:"Annotations",id:"annotations",level:2},{value:"Diagram direction",id:"diagram-direction",level:2}];function g(a){const s={code:"code",h2:"h2",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...a.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:"The following classes can be useful when creating class diagrams:"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"siren"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"classDiagram"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"classRltsType"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"classCardinality"})}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"classDirection"})}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"classMemberVisibility"})," / ",(0,r.jsx)(s.code,{children:"cmv"})]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"classMemberClassifier"})," / ",(0,r.jsx)(s.code,{children:"cmc"})]}),"\n",(0,r.jsx)(s.li,{children:(0,r.jsx)(s.code,{children:"classConfig"})}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"animals",children:"Animals"}),"\n",(0,r.jsxs)(e.A,{groupId:"preferred-lang",queryString:!0,children:[(0,r.jsx)(l.A,{value:"fsharp",label:"F#",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-fsharp",children:'let duck,animal,zebra,fish = "Duck","Animal","Zebra","Fish"\r\nsiren.classDiagram [\r\n    classDiagram.note "From Duck till Zebra"\r\n    classDiagram.relationshipInheritance(duck, animal)\r\n    classDiagram.note(@"can fly\\ncan swim\\ncan dive\\ncan help in debugging", duck)\r\n    classDiagram.relationshipInheritance(fish, animal)\r\n    classDiagram.relationshipInheritance(zebra, animal)\r\n    classDiagram.idAttr(animal,"age", "int", classMemberVisibility.Public)\r\n    classDiagram.idAttr(animal, "gender", "String", classMemberVisibility.Public)\r\n    classDiagram.idFunction(animal, "isMammal", classMemberVisibility = classMemberVisibility.Public)\r\n    classDiagram.idFunction(animal, "mate", classMemberVisibility = classMemberVisibility.Public)\r\n    classDiagram.``class``(duck,members=[\r\n        classDiagram.classAttr("beakColor","String", classMemberVisibility.Public)\r\n        classDiagram.classFunction("swim", classMemberVisibility = classMemberVisibility.Public)\r\n        classDiagram.classFunction("quack", classMemberVisibility = classMemberVisibility.Public)\r\n    ])\r\n    classDiagram.``class``(fish,members=[\r\n        classDiagram.classAttr("sizeInFeet","int", classMemberVisibility.Private)\r\n        classDiagram.classFunction("canEat", classMemberVisibility = classMemberVisibility.Private)\r\n    ])\r\n    classDiagram.``class``(zebra,members=[\r\n        classDiagram.classAttr("is_wild","bool", classMemberVisibility.Public)\r\n        classDiagram.classFunction("run", classMemberVisibility = classMemberVisibility.Public)\r\n    ])\r\n    classDiagram.``namespace``("Mammals", [\r\n        classDiagram.classId(zebra)\r\n    ])\r\n]\r\n|> siren.write\n'})})}),(0,r.jsx)(l.A,{value:"csharp",label:"C#",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'(string duck, string fish, string zebra, string animal) = ("Duck", "Fish", "Zebra", "Animal");\r\nstring actual = siren.classDiagram\r\n    ([\r\n        classDiagram.note("From Duck till Zebra"),\r\n        classDiagram.relationshipInheritance(duck, animal),\r\n        classDiagram.note(@"can fly\\ncan swim\\ncan dive\\ncan help in debugging", duck),\r\n        classDiagram.relationshipInheritance(fish, animal),\r\n        classDiagram.relationshipInheritance(zebra, animal),\r\n        classDiagram.idAttr(animal,"age", "int", classMemberVisibility.@public),\r\n        classDiagram.idAttr(animal, "gender", "String", classMemberVisibility.@public),\r\n        classDiagram.idFunction(animal, "isMammal", classMemberVisibility: classMemberVisibility.@public),\r\n        classDiagram.idFunction(animal, "mate", classMemberVisibility: classMemberVisibility.@public),\r\n        classDiagram.@class(duck, [\r\n            classDiagram.classAttr("beakColor", "String", classMemberVisibility.@public),\r\n            classDiagram.classFunction("swim", classMemberVisibility: classMemberVisibility.@public),\r\n            classDiagram.classFunction("quack", classMemberVisibility: classMemberVisibility.@public)\r\n        ]),\r\n        classDiagram.@class(fish, [\r\n            classDiagram.classAttr("sizeInFeet", "int", classMemberVisibility.@private),\r\n            classDiagram.classFunction("canEat", classMemberVisibility: classMemberVisibility.@private)\r\n        ]),\r\n        classDiagram.@class(zebra, members: [\r\n            classDiagram.classAttr("is_wild", "bool", classMemberVisibility.@public),\r\n            classDiagram.classFunction("run", classMemberVisibility: classMemberVisibility.@public)\r\n        ]),\r\n        classDiagram.@namespace("Mammals", [\r\n            classDiagram.classId(zebra)\r\n        ])\r\n    ]).write();\n'})})}),(0,r.jsx)(l.A,{value:"py",label:"Python",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-py",children:'(duck,animal,zebra,fish) = ("Duck","Animal","Zebra","Fish")\r\nsiren.class_diagram([\r\n    class_diagram.note("From Duck till Zebra"),\r\n    class_diagram.relationship_inheritance(duck, animal),\r\n    class_diagram.note("can fly\\ncan swim\\ncan dive\\ncan help in debugging", duck),\r\n    class_diagram.relationship_inheritance(fish, animal),\r\n    class_diagram.relationship_inheritance(zebra, animal),\r\n    class_diagram.id_attr(animal, "age", "int", class_member_visibility.Public()),\r\n    class_diagram.id_attr(animal, "gender", "String", class_member_visibility.Public()),\r\n    class_diagram.id_function(animal, "isMammal", class_member_visibility = class_member_visibility.Public()),\r\n    class_diagram.id_function(animal, "mate", class_member_visibility = class_member_visibility.Public()),\r\n    class_diagram.class_(duck, [\r\n        class_diagram.class_attr("beakColor", "String", class_member_visibility.Public()),\r\n        class_diagram.class_function("swim", class_member_visibility = class_member_visibility.Public()),\r\n        class_diagram.class_function("quack", class_member_visibility = class_member_visibility.Public())\r\n    ]),\r\n    class_diagram.class_(fish, [\r\n        class_diagram.class_attr("sizeInFeet","int", class_member_visibility.Private()),\r\n        class_diagram.class_function("canEat", class_member_visibility = class_member_visibility.Private())\r\n    ]),\r\n    class_diagram.class_(zebra, [\r\n        class_diagram.class_attr("is_wild","bool", class_member_visibility.Public()),\r\n        class_diagram.class_function("run", class_member_visibility = class_member_visibility.Public())\r\n    ]),\r\n    class_diagram.namespace("Mammals", [\r\n        class_diagram.class_id(zebra)\r\n    ])\r\n]).write()\n'})})}),(0,r.jsx)(l.A,{value:"js",label:"JavaScript",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'let [duck,animal,zebra,fish] = ["Duck","Animal","Zebra","Fish"]\r\nsiren.classDiagram([\r\n    classDiagram.note("From Duck till Zebra"),\r\n    classDiagram.relationshipInheritance(duck, animal),\r\n    classDiagram.note("can fly\\ncan swim\\ncan dive\\ncan help in debugging", duck),\r\n    classDiagram.relationshipInheritance(fish, animal),\r\n    classDiagram.relationshipInheritance(zebra, animal),\r\n    classDiagram.idAttr(animal, "age", "int", classMemberVisibility.Public),\r\n    classDiagram.idAttr(animal, "gender", "String", classMemberVisibility.Public),\r\n    classDiagram.idFunction(animal, "isMammal", null, null, classMemberVisibility.Public),\r\n    classDiagram.idFunction(animal, "mate", null, null, classMemberVisibility.Public),\r\n    classDiagram.class(duck, [\r\n        classDiagram.classAttr("beakColor", "String", classMemberVisibility.Public),\r\n        classDiagram.classFunction("swim", null, null, classMemberVisibility.Public),\r\n        classDiagram.classFunction("quack", null, null, classMemberVisibility.Public)\r\n    ]),\r\n    classDiagram.class(fish, [\r\n        classDiagram.classAttr("sizeInFeet","int", classMemberVisibility.Private),\r\n        classDiagram.classFunction("canEat", null, null, classMemberVisibility.Private)\r\n    ]),\r\n    classDiagram.class(zebra, [\r\n        classDiagram.classAttr("is_wild","bool", classMemberVisibility.Public),\r\n        classDiagram.classFunction("run", null, null, classMemberVisibility.Public)\r\n    ]),\r\n    classDiagram.namespace("Mammals", [\r\n        classDiagram.classId(zebra)\r\n    ])\r\n]).write();\n'})})})]}),"\n","\n",(0,r.jsxs)(e.A,{children:[(0,r.jsx)(l.A,{value:"graph",label:"Graph",children:(0,r.jsx)(s.mermaid,{value:'classDiagram\r\n    note "From Duck till Zebra"\r\n    Duck --|> Animal\r\n    note for Duck "can fly\\ncan swim\\ncan dive\\ncan help in debugging"\r\n    Fish --|> Animal\r\n    Zebra --|> Animal\r\n    Animal : +int age\r\n    Animal : +String gender\r\n    Animal : +isMammal()\r\n    Animal : +mate()\r\n    class Duck{\r\n        +String beakColor\r\n        +swim()\r\n        +quack()\r\n    }\r\n    class Fish{\r\n        -int sizeInFeet\r\n        -canEat()\r\n    }\r\n    class Zebra{\r\n        +bool is_wild\r\n        +run()\r\n    }\r\n    namespace Mammals {\r\n        class Zebra\r\n    }'})}),(0,r.jsx)(l.A,{value:"output",label:"Output",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yml",children:'classDiagram\r\n    note "From Duck till Zebra"\r\n    Duck --|> Animal\r\n    note for Duck "can fly\\ncan swim\\ncan dive\\ncan help in debugging"\r\n    Fish --|> Animal\r\n    Zebra --|> Animal\r\n    Animal : +int age\r\n    Animal : +String gender\r\n    Animal : +isMammal()\r\n    Animal : +mate()\r\n    class Duck{\r\n        +String beakColor\r\n        +swim()\r\n        +quack()\r\n    }\r\n    class Fish{\r\n        -int sizeInFeet\r\n        -canEat()\r\n    }\r\n    class Zebra{\r\n        +bool is_wild\r\n        +run()\r\n    }\r\n    namespace Mammals {\r\n        class Zebra\r\n    }\n'})})})]}),"\n",(0,r.jsx)(s.h2,{id:"class",children:"Class"}),"\n",(0,r.jsxs)(e.A,{groupId:"preferred-lang",queryString:!0,children:[(0,r.jsx)(l.A,{value:"fsharp",label:"F#",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-fsharp",children:'let bankacc = "BankAccount"\r\nsiren.classDiagram [\r\n    classDiagram.classId(bankacc)\r\n    classDiagram.idAttr(bankacc,"owner", "String", classMemberVisibility.Public)\r\n    classDiagram.idAttr(bankacc,"balance", "Bigdecimal", classMemberVisibility.Public)\r\n    classDiagram.idFunction(bankacc,"deposit", "amount", classMemberVisibility = classMemberVisibility.Public)\r\n    classDiagram.idFunction(bankacc,"withdrawal", "amount", classMemberVisibility = classMemberVisibility.Public)\r\n]\r\n|> siren.withTitle ("Bank example")\r\n|> siren.write\n'})})}),(0,r.jsx)(l.A,{value:"csharp",label:"C#",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'string bankacc = "BankAccount";\r\nstring actual = siren.classDiagram\r\n    ([\r\n        classDiagram.classId(bankacc),\r\n        classDiagram.idAttr(bankacc, "owner", "String", classMemberVisibility.@public),\r\n        classDiagram.idAttr(bankacc, "balance", "Bigdecimal", classMemberVisibility.@public),\r\n        classDiagram.idFunction(bankacc, "deposit", "amount", classMemberVisibility: classMemberVisibility.@public),\r\n        classDiagram.idFunction(bankacc, "withdrawal", "amount", classMemberVisibility: classMemberVisibility.@public)\r\n    ])\r\n        .withTitle("Bank example")\r\n        .write();\n'})})}),(0,r.jsx)(l.A,{value:"py",label:"Python",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-py",children:'bankacc = "BankAccount"\r\nsiren.class_diagram([\r\n    class_diagram.class_id(bankacc),\r\n    class_diagram.id_attr(bankacc,"owner", "String", class_member_visibility.Public()),\r\n    class_diagram.id_attr(bankacc,"balance", "Bigdecimal", class_member_visibility.Public()),\r\n    class_diagram.id_function(bankacc,"deposit", "amount", class_member_visibility = class_member_visibility.Public()),\r\n    class_diagram.id_function(bankacc,"withdrawal", "amount", class_member_visibility = class_member_visibility.Public())\r\n]).with_title("Bank example").write()\n'})})}),(0,r.jsx)(l.A,{value:"js",label:"JavaScript",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'let bankacc = "BankAccount"\r\nsiren.classDiagram([\r\n    classDiagram.classId(bankacc),\r\n    classDiagram.idAttr(bankacc,"owner", "String", classMemberVisibility.Public),\r\n    classDiagram.idAttr(bankacc,"balance", "Bigdecimal", classMemberVisibility.Public),\r\n    classDiagram.idFunction(bankacc,"deposit", "amount", null, classMemberVisibility.Public),\r\n    classDiagram.idFunction(bankacc,"withdrawal", "amount", null, classMemberVisibility.Public)\r\n])\r\n  .withTitle("Bank example")\r\n  .write();\n'})})})]}),"\n","\n",(0,r.jsxs)(e.A,{children:[(0,r.jsx)(l.A,{value:"graph",label:"Graph",children:(0,r.jsx)(s.mermaid,{value:"---\r\ntitle: Bank example\r\n---\r\nclassDiagram\r\n    class BankAccount\r\n    BankAccount : +String owner\r\n    BankAccount : +Bigdecimal balance\r\n    BankAccount : +deposit(amount)\r\n    BankAccount : +withdrawal(amount)"})}),(0,r.jsx)(l.A,{value:"output",label:"Output",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yml",children:"---\r\ntitle: Bank example\r\n---\r\nclassDiagram\r\n    class BankAccount\r\n    BankAccount : +String owner\r\n    BankAccount : +Bigdecimal balance\r\n    BankAccount : +deposit(amount)\r\n    BankAccount : +withdrawal(amount)\n"})})})]}),"\n",(0,r.jsx)(s.h2,{id:"generic-types",children:"Generic Types"}),"\n",(0,r.jsxs)(e.A,{groupId:"preferred-lang",queryString:!0,children:[(0,r.jsx)(l.A,{value:"fsharp",label:"F#",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-fsharp",children:'let square = "Square"\r\nsiren.classDiagram [\r\n    classDiagram.classId(square, generic="Shape", members=[\r\n        classDiagram.classAttr("id", "int")\r\n        classDiagram.classAttr("position", "List<int>")\r\n        classDiagram.classFunction("setPoints", "List<int> points")\r\n        classDiagram.classFunction("getPoints", returnType = "List<int>")\r\n    ])\r\n    classDiagram.idAttr(square, "messages", "List<string>", classMemberVisibility.Private)\r\n    classDiagram.idFunction(square, "setMessages", "List<string> messages", classMemberVisibility = classMemberVisibility.Public)\r\n    classDiagram.idFunction(square, "getMessages", returnType = "List<string>", classMemberVisibility = classMemberVisibility.Public)\r\n    classDiagram.idFunction(square, "getDistanceMatrix", returnType = "List<List<int>>", classMemberVisibility = classMemberVisibility.Public)\r\n]\r\n|> siren.write\n'})})}),(0,r.jsx)(l.A,{value:"csharp",label:"C#",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'string square = "Square";\r\nstring actual = siren.classDiagram\r\n    ([\r\n        classDiagram.classId(square, generic: "Shape", members: new ClassDiagramElement[] {\r\n            classDiagram.classAttr("id", "int"),\r\n            classDiagram.classAttr("position", "List<int>"),\r\n            classDiagram.classFunction("setPoints", "List<int> points"),\r\n            classDiagram.classFunction("getPoints", returnType: "List<int>")\r\n        }),\r\n        classDiagram.idAttr(square, "messages", "List<string>", classMemberVisibility.@private),\r\n        classDiagram.idFunction(square, "setMessages", "List<string> messages", classMemberVisibility: classMemberVisibility.@public),\r\n        classDiagram.idFunction(square, "getMessages", returnType: "List<string>", classMemberVisibility: classMemberVisibility.@public),\r\n        classDiagram.idFunction(square, "getDistanceMatrix", returnType: "List<List<int>>", classMemberVisibility: classMemberVisibility.@public)\r\n\r\n    ]).write();\n'})})}),(0,r.jsx)(l.A,{value:"py",label:"Python",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-py",children:'square = "Square"\r\nsiren.class_diagram([\r\n    class_diagram.class_id(square, generic="Shape", members=[\r\n        class_diagram.class_attr("id", "int"),\r\n        class_diagram.class_attr("position", "List<int>"),\r\n        class_diagram.class_function("setPoints", "List<int> points"),\r\n        class_diagram.class_function("getPoints", return_type = "List<int>")\r\n    ]),\r\n    class_diagram.id_attr(square, "messages", "List<string>", class_member_visibility=class_member_visibility.Private()),\r\n    class_diagram.id_function(square, "setMessages", "List<string> messages", class_member_visibility=class_member_visibility.Public()),\r\n    class_diagram.id_function(square, "getMessages", return_type = "List<string>", class_member_visibility=class_member_visibility.Public()),\r\n    class_diagram.id_function(square, "getDistanceMatrix", return_type = "List<List<int>>", class_member_visibility=class_member_visibility.Public())\r\n]).write()\n'})})}),(0,r.jsx)(l.A,{value:"js",label:"JavaScript",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'let square = "Square"\r\nsiren.classDiagram([\r\n    classDiagram.classId(square, null, "Shape", [\r\n        classDiagram.classAttr("id", "int"),\r\n        classDiagram.classAttr("position", "List<int>"),\r\n        classDiagram.classFunction("setPoints", "List<int> points"),\r\n        classDiagram.classFunction("getPoints", null, "List<int>")\r\n    ]),\r\n    classDiagram.idAttr(square, "messages", "List<string>", classMemberVisibility.Private),\r\n    classDiagram.idFunction(square, "setMessages", "List<string> messages", null,  classMemberVisibility.Public),\r\n    classDiagram.idFunction(square, "getMessages", null, "List<string>", classMemberVisibility.Public),\r\n    classDiagram.idFunction(square, "getDistanceMatrix", null, "List<List<int>>", classMemberVisibility.Public)\r\n])\r\n  .write();\n'})})})]}),"\n","\n",(0,r.jsxs)(e.A,{children:[(0,r.jsx)(l.A,{value:"graph",label:"Graph",children:(0,r.jsx)(s.mermaid,{value:"classDiagram\r\n    class Square~Shape~{\r\n        int id\r\n        List~int~ position\r\n        setPoints(List~int~ points)\r\n        getPoints() List~int~\r\n    }\r\n    Square : -List~string~ messages\r\n    Square : +setMessages(List~string~ messages)\r\n    Square : +getMessages() List~string~\r\n    Square : +getDistanceMatrix() List~List~int~~"})}),(0,r.jsx)(l.A,{value:"output",label:"Output",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yml",children:"classDiagram\r\n    class Square~Shape~{\r\n        int id\r\n        List~int~ position\r\n        setPoints(List~int~ points)\r\n        getPoints() List~int~\r\n    }\r\n    Square : -List~string~ messages\r\n    Square : +setMessages(List~string~ messages)\r\n    Square : +getMessages() List~string~\r\n    Square : +getDistanceMatrix() List~List~int~~\n"})})})]}),"\n",(0,r.jsx)(s.h2,{id:"annotations",children:"Annotations"}),"\n",(0,r.jsxs)(e.A,{groupId:"preferred-lang",queryString:!0,children:[(0,r.jsx)(l.A,{value:"fsharp",label:"F#",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-fsharp",children:'siren.classDiagram [\r\n    classDiagram.``class``("Shape", members=[\r\n        classDiagram.Interface()\r\n        classDiagram.classAttr("noOfVertices")\r\n        classDiagram.classFunction("draw")\r\n    ])\r\n    classDiagram.``class``("Color", members=[\r\n        classDiagram.enumeration()\r\n        classDiagram.classAttr("RED")\r\n        classDiagram.classAttr("BLUE")\r\n        classDiagram.classAttr("GREEN")\r\n        classDiagram.classAttr("WHITE")\r\n        classDiagram.classAttr("BLACK")\r\n    ])\r\n]\r\n|> siren.write\n'})})}),(0,r.jsx)(l.A,{value:"csharp",label:"C#",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'string actual = siren.classDiagram\r\n    ([\r\n        classDiagram.@class("Shape", [\r\n            classDiagram.@interface(),\r\n            classDiagram.classAttr("noOfVertices"),\r\n            classDiagram.classFunction("draw")\r\n        ]),\r\n        classDiagram.@class("Color", [\r\n            classDiagram.enumeration(),\r\n            classDiagram.classAttr("RED"),\r\n            classDiagram.classAttr("BLUE"),\r\n            classDiagram.classAttr("GREEN"),\r\n            classDiagram.classAttr("WHITE"),\r\n            classDiagram.classAttr("BLACK")\r\n        ])\r\n    ]).write();\n'})})}),(0,r.jsx)(l.A,{value:"py",label:"Python",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-py",children:'siren.class_diagram([\r\n    class_diagram.class_("Shape", members=[\r\n        class_diagram.Interface(),\r\n        class_diagram.class_attr("noOfVertices"),\r\n        class_diagram.class_function("draw")\r\n    ]),\r\n    class_diagram.class_("Color", members=[\r\n        class_diagram.enumeration(),\r\n        class_diagram.class_attr("RED"),\r\n        class_diagram.class_attr("BLUE"),\r\n        class_diagram.class_attr("GREEN"),\r\n        class_diagram.class_attr("WHITE"),\r\n        class_diagram.class_attr("BLACK")\r\n    ])\r\n]).write()\n'})})}),(0,r.jsx)(l.A,{value:"js",label:"JavaScript",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'siren.classDiagram([\r\n    classDiagram.class("Shape", [\r\n        classDiagram.Interface(),\r\n        classDiagram.classAttr("noOfVertices"),\r\n        classDiagram.classFunction("draw")\r\n    ]),\r\n    classDiagram.class("Color", [\r\n        classDiagram.enumeration(),\r\n        classDiagram.classAttr("RED"),\r\n        classDiagram.classAttr("BLUE"),\r\n        classDiagram.classAttr("GREEN"),\r\n        classDiagram.classAttr("WHITE"),\r\n        classDiagram.classAttr("BLACK")\r\n    ])\r\n])\r\n  .write();\n'})})})]}),"\n","\n",(0,r.jsxs)(e.A,{children:[(0,r.jsx)(l.A,{value:"graph",label:"Graph",children:(0,r.jsx)(s.mermaid,{value:"classDiagram\r\n    class Shape{\r\n        <<Interface>>\r\n        noOfVertices\r\n        draw()\r\n    }\r\n    class Color{\r\n        <<Enumeration>>\r\n        RED\r\n        BLUE\r\n        GREEN\r\n        WHITE\r\n        BLACK\r\n    }"})}),(0,r.jsx)(l.A,{value:"output",label:"Output",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yml",children:"classDiagram\r\n    class Shape{\r\n        <<Interface>>\r\n        noOfVertices\r\n        draw()\r\n    }\r\n    class Color{\r\n        <<Enumeration>>\r\n        RED\r\n        BLUE\r\n        GREEN\r\n        WHITE\r\n        BLACK\r\n    }\n"})})})]}),"\n",(0,r.jsx)(s.h2,{id:"diagram-direction",children:"Diagram direction"}),"\n",(0,r.jsxs)(e.A,{groupId:"preferred-lang",queryString:!0,children:[(0,r.jsx)(l.A,{value:"fsharp",label:"F#",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-fsharp",children:'let student, idCard, bike = "Student", "IdCard", "Bike"\r\nsiren.classDiagram [\r\n    classDiagram.directionRL\r\n    classDiagram.``class``(student, members=[\r\n        classDiagram.raw("-idCard : IdCard")\r\n    ])\r\n    classDiagram.``class``(idCard, members=[\r\n        classDiagram.raw("-id : int")\r\n        classDiagram.raw("-name : string")\r\n    ])\r\n    classDiagram.``class``(bike, members=[\r\n        classDiagram.raw("-id : int")\r\n        classDiagram.raw("-name : string")\r\n    ])\r\n    classDiagram.relationshipAggregation (student, idCard, "carries", classCardinality.one, classCardinality.one)\r\n    classDiagram.relationshipAggregation (student, bike, "rides", classCardinality.one, classCardinality.one)\r\n]\r\n|> siren.write\n'})})}),(0,r.jsx)(l.A,{value:"csharp",label:"C#",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-csharp",children:'(string student, string idCard, string bike) = ("Student", "IdCard", "Bike");\r\nstring actual = siren.classDiagram\r\n    ([\r\n        classDiagram.directionRL,\r\n        classDiagram.@class(student, [\r\n            classDiagram.raw("-idCard : IdCard")\r\n        ]),\r\n        classDiagram.@class(idCard, [\r\n            classDiagram.raw("-id : int"),\r\n            classDiagram.raw("-name : string")\r\n        ]),\r\n        classDiagram.@class(bike, [\r\n            classDiagram.raw("-id : int"),\r\n            classDiagram.raw("-name : string")\r\n        ]),\r\n        classDiagram.relationshipAggregation(student, idCard, "carries", classCardinality.one, classCardinality.one),\r\n        classDiagram.relationshipAggregation(student, bike, "rides", classCardinality.one, classCardinality.one)\r\n    ]).write();\n'})})}),(0,r.jsx)(l.A,{value:"py",label:"Python",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-py",children:'(student, idCard, bike) = ("Student", "IdCard", "Bike")\r\nsiren.class_diagram([\r\n    class_diagram.direction_rl(),\r\n    class_diagram.class_(student, members=[\r\n        class_diagram.raw("-idCard : IdCard")\r\n    ]),\r\n    class_diagram.class_(idCard, members=[\r\n        class_diagram.raw("-id : int"),\r\n        class_diagram.raw("-name : string")\r\n    ]),\r\n    class_diagram.class_(bike, members=[\r\n        class_diagram.raw("-id : int"),\r\n        class_diagram.raw("-name : string")\r\n    ]),\r\n    class_diagram.relationship_aggregation (student, idCard, "carries", class_cardinality.one(), class_cardinality.one()),\r\n    class_diagram.relationship_aggregation (student, bike, "rides", class_cardinality.one(), class_cardinality.one())\r\n]).write()\n'})})}),(0,r.jsx)(l.A,{value:"js",label:"JavaScript",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-js",children:'let [student, idCard, bike] = ["Student", "IdCard", "Bike"]\r\nsiren.classDiagram([\r\n    classDiagram.directionRL,\r\n    classDiagram.class(student, [\r\n        classDiagram.raw("-idCard : IdCard")\r\n    ]),\r\n    classDiagram.class(idCard, [\r\n        classDiagram.raw("-id : int"),\r\n        classDiagram.raw("-name : string")\r\n    ]),\r\n    classDiagram.class(bike, [\r\n        classDiagram.raw("-id : int"),\r\n        classDiagram.raw("-name : string")\r\n    ]),\r\n    classDiagram.relationshipAggregation (student, idCard, "carries", classCardinality.one, classCardinality.one),\r\n    classDiagram.relationshipAggregation (student, bike, "rides", classCardinality.one, classCardinality.one)\r\n])\r\n  .write();\n'})})})]}),"\n","\n",(0,r.jsxs)(e.A,{children:[(0,r.jsx)(l.A,{value:"graph",label:"Graph",children:(0,r.jsx)(s.mermaid,{value:'classDiagram\r\n    direction RL\r\n    class Student{\r\n        -idCard : IdCard\r\n    }\r\n    class IdCard{\r\n        -id : int\r\n        -name : string\r\n    }\r\n    class Bike{\r\n        -id : int\r\n        -name : string\r\n    }\r\n    Student "1" --o "1" IdCard : carries\r\n    Student "1" --o "1" Bike : rides'})}),(0,r.jsx)(l.A,{value:"output",label:"Output",children:(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-yml",children:'classDiagram\r\n    direction RL\r\n    class Student{\r\n        -idCard : IdCard\r\n    }\r\n    class IdCard{\r\n        -id : int\r\n        -name : string\r\n    }\r\n    class Bike{\r\n        -id : int\r\n        -name : string\r\n    }\r\n    Student "1" --o "1" IdCard : carries\r\n    Student "1" --o "1" Bike : rides\n'})})})]})]})}function o(a={}){const{wrapper:s}={...(0,n.R)(),...a.components};return s?(0,r.jsx)(s,{...a,children:(0,r.jsx)(g,{...a})}):g(a)}},9365:(a,s,i)=>{i.d(s,{A:()=>l});i(6540);var r=i(4164);const n={tabItem:"tabItem_Ymn6"};var e=i(4848);function l(a){let{children:s,hidden:i,className:l}=a;return(0,e.jsx)("div",{role:"tabpanel",className:(0,r.A)(n.tabItem,l),hidden:i,children:s})}},1470:(a,s,i)=>{i.d(s,{A:()=>v});var r=i(6540),n=i(4164),e=i(3104),l=i(6347),c=i(205),t=i(7485),m=i(1682),d=i(9466);function u(a){return r.Children.toArray(a).filter((a=>"\n"!==a)).map((a=>{if(!a||(0,r.isValidElement)(a)&&function(a){const{props:s}=a;return!!s&&"object"==typeof s&&"value"in s}(a))return a;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof a.type?a.type:a.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function g(a){const{values:s,children:i}=a;return(0,r.useMemo)((()=>{const a=s??function(a){return u(a).map((a=>{let{props:{value:s,label:i,attributes:r,default:n}}=a;return{value:s,label:i,attributes:r,default:n}}))}(i);return function(a){const s=(0,m.X)(a,((a,s)=>a.value===s.value));if(s.length>0)throw new Error(`Docusaurus error: Duplicate values "${s.map((a=>a.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(a),a}),[s,i])}function o(a){let{value:s,tabValues:i}=a;return i.some((a=>a.value===s))}function b(a){let{queryString:s=!1,groupId:i}=a;const n=(0,l.W6)(),e=function(a){let{queryString:s=!1,groupId:i}=a;if("string"==typeof s)return s;if(!1===s)return null;if(!0===s&&!i)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:s,groupId:i});return[(0,t.aZ)(e),(0,r.useCallback)((a=>{if(!e)return;const s=new URLSearchParams(n.location.search);s.set(e,a),n.replace({...n.location,search:s.toString()})}),[e,n])]}function h(a){const{defaultValue:s,queryString:i=!1,groupId:n}=a,e=g(a),[l,t]=(0,r.useState)((()=>function(a){let{defaultValue:s,tabValues:i}=a;if(0===i.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(s){if(!o({value:s,tabValues:i}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${s}" but none of its children has the corresponding value. Available values are: ${i.map((a=>a.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return s}const r=i.find((a=>a.default))??i[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:s,tabValues:e}))),[m,u]=b({queryString:i,groupId:n}),[h,p]=function(a){let{groupId:s}=a;const i=function(a){return a?`docusaurus.tab.${a}`:null}(s),[n,e]=(0,d.Dv)(i);return[n,(0,r.useCallback)((a=>{i&&e.set(a)}),[i,e])]}({groupId:n}),D=(()=>{const a=m??h;return o({value:a,tabValues:e})?a:null})();(0,c.A)((()=>{D&&t(D)}),[D]);return{selectedValue:l,selectValue:(0,r.useCallback)((a=>{if(!o({value:a,tabValues:e}))throw new Error(`Can't select invalid tab value=${a}`);t(a),u(a),p(a)}),[u,p,e]),tabValues:e}}var p=i(2303);const D={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=i(4848);function _(a){let{className:s,block:i,selectedValue:r,selectValue:l,tabValues:c}=a;const t=[],{blockElementScrollPositionUntilNextRender:m}=(0,e.a_)(),d=a=>{const s=a.currentTarget,i=t.indexOf(s),n=c[i].value;n!==r&&(m(s),l(n))},u=a=>{let s=null;switch(a.key){case"Enter":d(a);break;case"ArrowRight":{const i=t.indexOf(a.currentTarget)+1;s=t[i]??t[0];break}case"ArrowLeft":{const i=t.indexOf(a.currentTarget)-1;s=t[i]??t[t.length-1];break}}s?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,n.A)("tabs",{"tabs--block":i},s),children:c.map((a=>{let{value:s,label:i,attributes:e}=a;return(0,y.jsx)("li",{role:"tab",tabIndex:r===s?0:-1,"aria-selected":r===s,ref:a=>t.push(a),onKeyDown:u,onClick:d,...e,className:(0,n.A)("tabs__item",D.tabItem,e?.className,{"tabs__item--active":r===s}),children:i??s},s)}))})}function x(a){let{lazy:s,children:i,selectedValue:n}=a;const e=(Array.isArray(i)?i:[i]).filter(Boolean);if(s){const a=e.find((a=>a.props.value===n));return a?(0,r.cloneElement)(a,{className:"margin-top--md"}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:e.map(((a,s)=>(0,r.cloneElement)(a,{key:s,hidden:a.props.value!==n})))})}function A(a){const s=h(a);return(0,y.jsxs)("div",{className:(0,n.A)("tabs-container",D.tabList),children:[(0,y.jsx)(_,{...a,...s}),(0,y.jsx)(x,{...a,...s})]})}function v(a){const s=(0,p.A)();return(0,y.jsx)(A,{...a,children:u(a.children)},String(s))}},8453:(a,s,i)=>{i.d(s,{R:()=>l,x:()=>c});var r=i(6540);const n={},e=r.createContext(n);function l(a){const s=r.useContext(e);return r.useMemo((function(){return"function"==typeof a?a(s):{...s,...a}}),[s,a])}function c(a){let s;return s=a.disableParentContext?"function"==typeof a.components?a.components(n):a.components||n:l(a.components),r.createElement(e.Provider,{value:s},a.children)}}}]);